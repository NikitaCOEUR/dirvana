#!/usr/bin/env zsh
# Zsh completions

__dirvana_complete_zsh() {
  local -a completions
  local -a suggestions
  local -a words_array
  local cword

  # In zsh, CURRENT is 1-based and points to the word being completed
  # For dirvana completion, we need COMP_CWORD to be 0-based and point to the position where we want completions
  #
  # Examples:
  #   "k <TAB>"     -> words=["k"], CURRENT=2 -> we want cword=1 (completing after k)
  #   "k ann<TAB>"  -> words=["k","ann"], CURRENT=2 -> we want cword=1 (completing word at position 1)
  #   "k get <TAB>" -> words=["k","get"], CURRENT=3 -> we want cword=2 (completing after get)

  words_array=("${words[@]}")

  # CURRENT points to the word being completed (1-based)
  # We convert to 0-based for COMP_CWORD
  cword=$((CURRENT - 1))

  # If cursor is after all words (CURRENT > number of words), we're completing a new word
  # Add an empty word to the array for completion
  if (( CURRENT > ${#words[@]} )); then
    words_array+=("")
  fi

  # Call dirvana completion with all words from command line
  local IFS=$'\n'
  suggestions=(${(f)"$(DIRVANA_COMP_CWORD=$cword dirvana completion -- "${words_array[@]}" 2>/dev/null)"})

  # Check if we got any suggestions
  if (( ${#suggestions[@]} == 0 )); then
    # Fallback to file completion
    _files
    return 0
  fi

  # Parse suggestions (format: value\tdescription)
  local suggestion value desc

  for suggestion in "${suggestions[@]}"; do
    if [[ "$suggestion" == *$'\t'* ]]; then
      value="${suggestion%%$'\t'*}"
      desc="${suggestion#*$'\t'}"
      completions+=("${value}:${desc}")
    else
      completions+=("${suggestion}")
    fi
  done

  # Use _describe which automatically handles prefix matching in zsh
  # The -V option disables sorting to preserve kubectl's order
  if _describe -V 'completions' completions; then
    return 0
  fi

  # If _describe didn't find matches, return error to trigger other matchers
  return 1
}

compdef __dirvana_complete_zsh %s 2>/dev/null || true
